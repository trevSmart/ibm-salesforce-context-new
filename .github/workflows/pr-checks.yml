name: Pull Request checks

on:
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.17.1]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v6
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint:fix

  # test:
  #   runs-on: ubuntu-latest
  #   needs: [lint]
  #   environment: copilot

  #   strategy:
  #     matrix:
  #       node-version: [22.17.1]

  #   env:
  #     SFDX_USE_GENERIC_UNIX_KEYCHAIN: 'true'
  #     SF_ORG_ALIAS: 'github-ci'

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v5

  #   - name: Setup Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v6
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Expose local Salesforce CLI
  #     run: echo "${{ github.workspace }}/node_modules/.bin" >> "$GITHUB_PATH"

  #   - name: Authenticate with Salesforce
  #     env:
  #       SF_ORG_CLIENT_ID: ${{ secrets.SF_ORG_CLIENT_ID }}
  #       SF_ORG_CLIENT_SECRET: ${{ secrets.SF_ORG_CLIENT_SECRET }}
  #       SF_ORG_CLIENT_USERNAME: ${{ secrets.SF_ORG_CLIENT_USERNAME }}
  #       SF_ORG_CLIENT_PASSWORD: ${{ secrets.SF_ORG_CLIENT_PASSWORD }}
  #     run: ./dev/startEnvironment.sh

  #   - name: Verify Salesforce connection
  #     run: |
  #       # Filter out accessToken immediately to avoid writing it to disk
  #       sf org display --json | jq 'del(.result.accessToken)' > org-details.json
  #       jq '{
  #         status: .status,
  #         result: {
  #           id: .result.id,
  #           username: .result.username,
  #           instanceUrl: .result.instanceUrl,
  #           connectedStatus: .result.connectedStatus,
  #           alias: .result.alias
  #         }
  #       }' org-details.json
  #       rm -f org-details.json

  #   - name: Run tests
  #     run: npm run test

  security:
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '22.17.1'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        # Run audit and capture output and exit code
        set +e  # Don't exit on error
        audit_output=$(npm audit --audit-level=high 2>&1)
        audit_exit_code=$?
        set -e  # Re-enable exit on error

        # If audit fails, check if it's due to known external vulnerabilities
        if [ $audit_exit_code -ne 0 ]; then
          echo "Security audit found vulnerabilities. Checking if they are external dependencies..."

          # Check if vulnerabilities are only in @salesforce/cli transitive dependencies
          cli_vulns=$(echo "$audit_output" | grep "node_modules/@salesforce/cli" | wc -l | tr -d ' ')
          if [ "$cli_vulns" -gt 0 ]; then
            echo "✅ Vulnerabilities are in external @salesforce/cli dependencies (see SECURITY.md)"
            echo "These do not affect the security of this project."
            exit 0
          else
            echo "❌ Found vulnerabilities in project dependencies that need attention"
            echo "$audit_output"
            exit $audit_exit_code
          fi
        else
          echo "✅ No high severity vulnerabilities found"
        fi

    - name: Check for outdated dependencies
      run: npm outdated || true
