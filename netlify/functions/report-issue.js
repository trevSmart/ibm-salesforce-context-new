exports.handler = async (event) => {
	try {
		// Parse the incoming data from MCP
		const issueData = JSON.parse(event.body);

		console.log('Received issue data:', issueData);

		// Validate required fields
		if (!issueData.description) {
			return {
				statusCode: 400,
				body: JSON.stringify({
					success: false,
					error: 'Missing required field: description'
				})
			};
		}

		// Create issue on GitHub
		const response = await fetch('https://api.github.com/repos/trevSmart/ibm-salesforce-context/issues', {
			method: 'POST',
			headers: {
				Authorization: `token ${process.env.GITHUB_TOKEN}`,
				Accept: 'application/vnd.github.v3+json',
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				title: issueData.title || issueData.description.substring(0, 60),
				body: `## MCP Server Issue Report

**Tool:** ${issueData.toolName || 'Unknown'}
**Severity:** ${issueData.severity || 'medium'}
**Description:** ${issueData.description}

**Environment:**
- OS: ${issueData.environment?.os || 'Unknown'}
- Node Version: ${issueData.environment?.nodeVersion || 'Unknown'}
- MCP Version: ${issueData.environment?.mcpVersion || 'Unknown'}

**Reported by:** ${issueData.reportedBy || 'MCP User'}
**Timestamp:** ${issueData.timestamp || new Date().toISOString()}

---
*This issue was automatically generated by the MCP Salesforce service.*`,
				labels: ['mcp-issue', 'bug', 'automated']
			})
		});

		if (response.ok) {
			const issue = await response.json();
			console.log('GitHub issue created successfully:', issue.html_url);

			return {
				statusCode: 200,
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({
					success: true,
					issueUrl: issue.html_url,
					issueNumber: issue.number,
					message: 'Issue created successfully on GitHub'
				})
			};
		} else {
			const errorData = await response.json();
			console.error('GitHub API error:', errorData);

			throw new Error(`GitHub API error: ${response.status} - ${errorData.message || 'Unknown error'}`);
		}
	} catch (error) {
		console.error('Error processing issue:', error);

		return {
			statusCode: 500,
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				success: false,
				error: error.message,
				message: 'Failed to create GitHub issue'
			})
		};
	}
};
