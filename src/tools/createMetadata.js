import fs from 'node:fs/promises';
import path from 'node:path';
import {z} from 'zod';
import {createModuleLogger} from '../lib/logger.js';
import {generateMetadata} from '../lib/salesforceServices.js';
import {textFileContent} from '../utils.js';

export const createMetadataToolDefinition = {
	name: 'createMetadata',
	title: 'Create Metadata (Apex Class, Apex Test Class, Apex Trigger or LWC)',
	description: await textFileContent('tools/createMetadata.md'),
	inputSchema: {
		type: z.enum(['apexClass', 'apexTestClass', 'apexTrigger', 'lwc']).describe('The metadata type to generate: "apexClass", "apexTestClass", "apexTrigger" or "lwc".'),
		name: z.string().describe('Name of the metadata to generate. For LWC, this will be the component folder name.'),
		outputDir: z.string().optional().describe('Optional. Output directory relative to the workspace. Defaults depend on the type.'),
		triggerSObject: z.string().optional().describe('Required for apexTrigger. The sObject API name the trigger is defined on. For LWC, this will be the component folder name.'),
		triggerEvent: z
			.array(z.enum(['before insert', 'before update', 'before delete', 'after insert', 'after update', 'after delete', 'after undelete']))
			.optional()
			.describe('Required for apexTrigger. Trigger events. Example: ["before insert", "after update"].')
	},
	outputSchema: {
		type: 'object',
		description: 'Response object containing metadata creation result'
	},
	annotations: {
		readOnlyHint: false,
		destructiveHint: false,
		idempotentHint: true,
		openWorldHint: true,
		title: 'Create Metadata (Apex Class, Apex Test Class, Apex Trigger or LWC)'
	}
};

export async function createMetadataToolHandler({type, name, outputDir, triggerSObject, triggerEvent = []}) {
	const logger = createModuleLogger(import.meta.url);

	try {
		const result = await generateMetadata({type, name, outputDir, triggerSObject, triggerEvent});

		if (!result.success) {
			throw new Error(result.error);
		}

		if (type === 'lwc') {
			const testsDirPath = path.join(result.folder, '__tests__');
			if (!result.folderAlreadyExists && result.files.includes(testsDirPath)) {
				try {
					await fs.rm(testsDirPath, {recursive: true, force: true});
					result.files = result.files.filter((filePath) => path.basename(filePath) !== '__tests__');
				} catch (error) {
					logger.warn(error, 'Failed to remove autogenerated __tests__ directory for LWC');
				}
			}
			if (typeof result.stdout === 'string') {
				result.stdout = result.stdout
					.split('\n')
					.filter((line) => !line.includes('__tests__'))
					.join('\n');
			}
		}

		return {
			content: [
				{
					type: 'text',
					text: `Successfully created ${result.files.length} metadata files.`
				}
			],
			structuredContent: result
		};
	} catch (error) {
		logger.error(error, 'Error creating metadata');
		return {
			isError: true,
			content: [
				{
					type: 'text',
					text: `‚ùå ${error.message}`
				}
			],
			structuredContent: {success: false, error: error.message}
		};
	}
}
